有向圖求合法路徑方法數

1. $f_k(i, j)$ 表示從$i$到$j$恰好$k$步的方法數
$f_k(i, j)=\sum^n_{x=1}f_{k-1}(i,x)*a(x,j)$

2. $S_k(i, j)$ 表示從$i$到$j$不超過$k$步的方法數
$S_k(i,j) =\sum^K_{k=1}f_k(i,j)$

多人背包
要求好幾個人的背包結果 (第k優解背包問題)
dp[i][j] 代表體積為i的第k優解

分組背包
當有分組問題，如買A物品前要先買B物品。
dp[i] = max(dp[i], dp[i - B - A] + val[B] + val[A])

多重背包
當每種物品為有限個時，求最大價值。
dp[i][j] = max(dp[i][j], dp[i - 1][j - k * w[i]] + k * v[i])
需要轉換成 單調對列優化
$d = j\; mod\; w[i]$, $s = |j / w[i]|$
dp[i] = max(dp[d + w[i] * k] - v[i] * k) + v * s

樹上背包
dp(u, i, j) 代表u根節點，遍歷i個子節點，且體積為j的最大價值。
dp(u, i, j) = max(dp(u, i - 1, j - k) + dp(v, s, k))
(s 為 v 子樹的節點數)

數位DP
1. 要求統計滿足一定條件的數的數量(即，最終目的為計數)
2. 這些條件經過轉化後可以使用「數位」的思想去理解和判斷
3. 輸入會提供一個數字區間（有時也只提供上界）來作為統計的限制
4. 上界很大（比如$10^{18}$），暴力枚舉驗證會超時。
dp[位數][限制1][限制2]...
dfs 從高到低

區間DP
合併：即將兩個或多個部分進行整合，當然也可以反過來
特徵：能將問題分解為能兩兩合併的形式
求解：對整個問題設最優值，枚舉合併點，將問題分解為左右兩個部分，最後合併兩個部分的最優值得到原問題的最優值
dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + cost)

SOS DP
=子集和DP
DP[mask] = $\sum_{i\in mask} A[i]$